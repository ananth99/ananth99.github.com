<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Ananth Madhavan</title>
<subtitle type="text"></subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2013-12-14T00:56:07+05:30</updated>
<id>/</id>
<author>
  <name>Ananth Madhavan</name>
  <uri>/</uri>
  <email>ananthmadhavan6@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[WebDev Turmoil]]></title>
  <link rel="alternate" type="text/html" href="/WebDev-Turmoil" />
  <id>/WebDev-Turmoil</id>
  <published>2013-09-12T00:00:00+05:30</published>
  <updated>2013-09-12T00:00:00+05:30</updated>
  <author>
    <name>Ananth Madhavan</name>
    <uri></uri>
    <email>ananthmadhavan6@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Repeat after me…&lt;/p&gt;

&lt;h4 id=&quot;database-migration-is-as-important-as-having-a-vcs&quot;&gt;“DATABASE MIGRATION IS AS IMPORTANT AS HAVING A VCS.”&lt;/h4&gt;
&lt;p&gt;If you’re a newbie who’s into WebDev like me, the above mantra should be the 1st one of your 108 mantras. &lt;/p&gt;

&lt;p&gt;I’m currently working as a developer in a small startup. We’re a team of four and we are working with the LAMP technology stack. Let me tell you why I’m writing this post..&lt;/p&gt;

&lt;p&gt;I did a feature implementation few days back and had created a couple of models and did a whole lot of tweaking in that process to the Database. Had this been just a code change which had to do with the Controllers or Views, we could’ve easily version-ed the code using &lt;em&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;&lt;/em&gt; or any other &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Revision_control&quot;&gt;vcs&lt;/a&gt;&lt;/em&gt;. But this Database tweak needed a Migration to be done and we didn’t have that in our code. Result? I pushed my code yesterday and my boss is still finding out the differences in the Database. We are due to do a Beta Release by EOD today and at this rate I think it’s highly unlikely that it’ll happen. So here I am, sitting at my desk just blinking at the monitor for the last four hours, ranting why it’s a thumb rule or a best practice to create a Migration immediately after you come up with your schema.&lt;/p&gt;

&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;

&lt;p&gt;I’ve tried to explain on how to create a Migration for your App that is developed using the &lt;em&gt;&lt;a href=&quot;www.yiiframework.com&quot;&gt;Yii Framework&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To start off with, let’s define the Thumb Rule in Database Migration. Any change(creating a table, removing a column, adding column constraints etc etc), that needs to be done to the existing structure of the Database, needs to be versioned. That said, let’s look into some code snippets to understand this better. Let’s assume that we have 2 developers A and B who are working on an exciting product. &lt;/p&gt;

&lt;h5 id=&quot;scenario&quot;&gt;Scenario&lt;/h5&gt;

&lt;p&gt;A wants to create a new table. So, he opens his terminal and keys in the following code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;$php yiic migrate create add_demo_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code creates a skeleton of the Migration he wishes to create.&lt;/p&gt;

&lt;h6 id=&quot;m131122184424adddemotablephp&quot;&gt;m131122_184424_add_demo_table.php&lt;/h6&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;?php
class m131122_184424_add_demo_table extends CDbMigration
{
	public &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	{
	}

	public &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; down&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	{
		echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;m131122_184424_add_demo_table does not support migration down.\n&amp;quot;&lt;/span&gt;;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; false;
	}

	/*
	&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; Use safeUp/safeDown &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; migration with transaction
	public &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; safeUp&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	{
	}

	public &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; safeDown&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	{
	}
	*/
}
?&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The naming is the essential part since the Database is versioned according to the time the migration is created. Now A can write his create table statements inside the up() function or the safeUp() function like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;$this&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;createTable&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;demo_table&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;array&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;integer not null&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;varchar(255) not null&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s1&quot;&gt;&amp;#39;primary key(id)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, now, if B wants to add a column to this table the next day, he simply creates another migration like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;$php yiic migrate create add_column_to_demo_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus all your Database tweaking is essentially version controlled! Now, if C joins the team, all he has to do is to copy all the migration files
and fire this command in the terminal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;$php yiic migrate &lt;span class=&quot;k&quot;&gt;up&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voila! He now has the most recent version of the Database. It’s that simple. :-)&lt;/p&gt;

&lt;p&gt;To undo the last migrate operation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;$php yiic migrate down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above command just invokes the down() or the safeDown() method which generally contains drop table commands.&lt;/p&gt;

&lt;p&gt;Note that when you’re firing the terminal commands, make sure you’re inside the protected folder. Otherwise, the yiic migrate tool won’t work.&lt;/p&gt;

&lt;p&gt;Almost every framework today, supports Migration. So, whichever framework you’re working on, make sure you create and update your Migration whenever you play around with your Database. Happy developing!  &lt;/p&gt;

&lt;p&gt;May the Force be with You!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/WebDev-Turmoil&quot;&gt;WebDev Turmoil&lt;/a&gt; was originally published by Ananth Madhavan at &lt;a href=&quot;&quot;&gt;Ananth Madhavan&lt;/a&gt; on September 12, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Broken Windows Theory]]></title>
  <link rel="alternate" type="text/html" href="/Broken-Window-Theory" />
  <id>/Broken-Window-Theory</id>
  <published>2013-01-30T00:00:00+05:30</published>
  <updated>2013-01-30T00:00:00+05:30</updated>
  <author>
    <name>Ananth Madhavan</name>
    <uri></uri>
    <email>ananthmadhavan6@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I recently stumbled upon a very interesting theory in the Internet. It’s called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Broken_windows_theory&quot;&gt;Broken windows theory&lt;/a&gt;.  To put it in a nut-shell, this theory states that maintaining and monitoring urban environments in a well-ordered condition may stop further vandalism and escalation into more serious crime. So, yeah, this post is about my view on this peculiar theory. Read on!&lt;/p&gt;

&lt;p&gt;When I came across this particular post on the Internet, I could immediately connect to it. Here’s why. Now, allow me to walk you through a quick analysis here.  Consider a busy Railway Station and a busy Metro Rail Station in Delhi on any given day. I’m pretty sure we all know how much importance public hygiene is given in a Railway Station. India: What can be done to improve sanitary conditions in India’s railway stations? This question should give you a better idea about public hygiene in Railway Stations and its importance. Coming back to our theory. So now, we can understand why there is so much of vandalism and other “petty” crimes in the Road Transportation sector and the Indian Railways. The root cause to all this IMO is that, people don’t care about public hygiene in these places. Is this the case with the Delhi Metro and the other Metros in India? NO. You are penalized heavily if you try to litter in these places. Again, the above stated theory holds good here. Ergo, you have a well maintained and efficiently functioning Metro. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/railways.jpg&quot; alt=&quot;Railways&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Ripple Effect as we all know, works out to be an advantage as well as a disadvantage when it comes to Public Hygiene. Actually, not so much of an advantage. It just proves to be an alibi. You can even see that happening everyday in front of you through this simple test.  Ask your friend not litter in public. The immediate response he/she comes up with would invariably be “I’ll stop littering once everyone else stops”. So yeah, there’s an alibi. What everyone needs to understand here, is what they already know. They just don’t want to accept it because it works in their convenience, doesn’t it? You go to another person and ask him to stop littering and he says the same thing and this goes on like an infinite loop. Is it helping the Public Hygiene and Sanitation in anyway? NO.&lt;/p&gt;

&lt;p&gt;I think it’s now safe to say that the Broken windows theory is not that peculiar to us and it indeed is an important theory that needs to be implemented in practice. A solution that I can think of to this problem of Public Hygiene and Sanitation: Break the loop, and Backtrack! Seriously, stop giving “everyone else” as an alibi. You are very much a part of the place around you, and you contribute to it’s Public Hygiene in all ways possible. Learn to accept that fact and it’s entirely in your hands to make “everyone else” also, to accept this. This way, we’re using the Ripple Effect to our advantage!  &lt;/p&gt;

&lt;p&gt;All it takes is an extra 200 meters walk to find a Dustbin and dispose off the waste. All it takes is an extra 90 seconds of time to tell our friends not to litter in Public. I think we have all the time in the World to follow this simple routine. Contribute to your surrounding even in the smallest way possible. It definitely inspires a lot of change around in a good way even without your knowledge!&lt;/p&gt;

&lt;p&gt;I think I have ranted enough. Comments and criticism are most welcome. :)&lt;/p&gt;

&lt;p&gt;May the Force be with you!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/Broken-Window-Theory&quot;&gt;Broken Windows Theory&lt;/a&gt; was originally published by Ananth Madhavan at &lt;a href=&quot;&quot;&gt;Ananth Madhavan&lt;/a&gt; on January 30, 2013.&lt;/p&gt;</content>
</entry>

</feed>